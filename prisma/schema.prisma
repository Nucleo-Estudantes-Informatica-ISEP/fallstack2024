generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                Role                 @default(STUDENT)
  isAdmin             Boolean              @default(false)
  savedStudents       SavedStudent[]
  passwordResetTokens PasswordResetToken[]

  student   Student?
  company   Company?
  interests Interest[]
}

model Action {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  points      Int

  Student   Student? @relation(fields: [studentId], references: [id])
  studentId Int?
}

model Talk {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  isLive    Boolean  @default(false)

  company     Company  @relation(fields: [companyName], references: [name])
  companyName String   @unique
  Student     Student? @relation(fields: [studentId], references: [id])
  studentId   Int?
}

model Student {
  id       Int            @id @default(autoincrement())
  user     User           @relation(fields: [userId], references: [id])
  code     String         @unique
  name     String
  bio      String?        @db.VarChar(300)
  year     String
  saves    SavedStudent[]
  cv       String?
  linkedin String?
  github   String?
  avatar   String?        @map("image")
  talks    Talk[]
  actions  Action[]
  interests Interest[]

  userId Int @unique
}

model Company {
  id     Int     @id @default(autoincrement())
  user   User    @relation(fields: [userId], references: [id])
  name   String  @unique
  tier   Tier
  avatar String? @map("image")

  interests Interest[]
  userId Int    @unique
  Talk   Talk[]
}

model Interest {
  name   String @id
  User   User?  @relation(fields: [userId], references: [id])
  userId Int? @unique

  interestOf Student[]
  interestedIn Company[]
}

model SavedStudent {
  student   Student  @relation(fields: [studentId], references: [id])
  savedBy   User     @relation(fields: [savedById], references: [id])
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())

  studentId Int
  savedById Int

  @@id([studentId, savedById, isSaved])
}

model PasswordResetToken {
  token String @id
  user  User   @relation(fields: [userId], references: [id])

  userId Int
}

enum Role {
  STUDENT
  COMPANY
}

enum Tier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}
