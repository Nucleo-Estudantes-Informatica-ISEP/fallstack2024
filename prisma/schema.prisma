generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                Role                 @default(STUDENT)
  isAdmin             Boolean              @default(false)
  savedStudents       SavedStudent[]
  passwordResetTokens PasswordResetToken[]

  student   Student?
  company   Company?
  interests UserInterest[]
}

model Interest {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  users UserInterest[]
}

model UserInterest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  interestId String  @db.ObjectId

  user      User     @relation(fields: [userId], references: [id])
  interest  Interest @relation(fields: [interestId], references: [id])

  @@unique([userId, interestId])
}

model Action {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  points      Int

  students ActionStudent[] // Explicit relation using join model
}

model ActionStudent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  actionId  String   @db.ObjectId
  studentId String   @db.ObjectId

  action    Action   @relation(fields: [actionId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([actionId, studentId]) // Ensure unique action-student pair
}

model Talk {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  startTime DateTime
  isLive    Boolean  @default(false)

  company     Company @relation(fields: [companyId], references: [id])
  companyId   String  @db.ObjectId

  students TalkStudent[] // Explicit relation using join model
}

model TalkStudent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  talkId    String   @db.ObjectId
  studentId String   @db.ObjectId

  talk      Talk     @relation(fields: [talkId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([talkId, studentId]) // Ensure unique talk-student pair
}

model Student {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  user     User           @relation(fields: [userId], references: [id])
  code     String         @unique
  name     String
  bio      String?        @db.String
  year     String
  saves    SavedStudent[]
  cv       String?
  linkedin String?
  github   String?
  avatar   String?        @map("image")
  actions  ActionStudent[] // Explicit relation using join model
  talks    TalkStudent[]  // Explicit relation using join model

  userId String @db.ObjectId @unique
}

model Company {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  name   String  @unique
  tier   Tier
  avatar String? @map("image")

  userId String @db.ObjectId @unique
  Talk   Talk[]
}

model SavedStudent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  student   Student  @relation(fields: [studentId], references: [id])
  savedBy   User     @relation(fields: [savedById], references: [id])
  isSaved   Boolean  @default(false)
  createdAt DateTime @default(now())

  studentId String @db.ObjectId
  savedById String @db.ObjectId

  @@unique([studentId, savedById, isSaved])
}

model PasswordResetToken {
  token String @id @map("_id")
  user  User   @relation(fields: [userId], references: [id])

  userId String @db.ObjectId
}

enum Role {
  STUDENT
  COMPANY
}

enum Tier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}
