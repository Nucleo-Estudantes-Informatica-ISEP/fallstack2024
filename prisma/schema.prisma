generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  email               String               @unique
  password            String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  role                Role                 @default(STUDENT)
  isAdmin             Boolean              @default(false)
  savedStudents       SavedStudent[]
  passwordResetTokens PasswordResetToken[]

  student   Student?
  company   Company?
  interestID String[] @db.ObjectId
  interests Interest[] @relation(fields: [interestID], references: [id])
}

model Action {
<<<<<<< HEAD
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
=======
  id          Int     @id @default(autoincrement())
>>>>>>> dev
  name        String
  description String
  points      Int
  altText     String?
<<<<<<< HEAD
  isRevealed  Boolean @default(false)

  StudentIds String[] @db.ObjectId
  Students Student[] @relation(fields: [StudentIds], references: [id])
}

model Talk {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  startTime DateTime
  isLive    Boolean  @default(false)
=======
  isVisible   Boolean @default(true)

  ActionCompletion ActionCompletion[]
}

model ActionCompletion {
  id          Int      @id @default(autoincrement())
  completedAt DateTime @default(now())
>>>>>>> dev

  action  Action  @relation(fields: [actionId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

<<<<<<< HEAD
  StudentIds String[] @db.ObjectId
  Students Student[] @relation(fields: [StudentIds], references: [id])
=======
  actionId  Int
  studentId Int
>>>>>>> dev
}

model Student {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  user     User           @relation(fields: [userId], references: [id])
  code     String         @unique
  name     String
  bio      String?        @db.String
  year     String
  saves    SavedStudent[]
  cv       String?
  linkedin String?
  github   String?
  avatar   String?        @map("image")

<<<<<<< HEAD
  talkIds  String[]		  @db.ObjectId
  talks    Talk[]		  @relation(fields: [talkIds], references: [id])

  actionIds String[]	  @db.ObjectId
  actions  Action[] 	  @relation(fields: [actionIds], references: [id])

  userId   String         @db.ObjectId @unique
=======
  userId Int @unique

  ActionCompletion ActionCompletion[]
>>>>>>> dev
}

model Company {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
  name   String  @unique
  tier   Tier
  avatar String? @map("image")

<<<<<<< HEAD
  userId String  @db.ObjectId @unique
  Talk   Talk[]
=======
  userId Int @unique
>>>>>>> dev
}

model Interest {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String  @unique

  UserIds String[] @db.ObjectId
  Users User[] @relation(fields: [UserIds], references: [id])
}

model SavedStudent {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  student    Student @relation(fields: [studentId], references: [id])
  savedBy    User    @relation(fields: [savedById], references: [id])
  isSaved    Boolean @default(false)
  createdAt  DateTime @default(now())

  studentId  String  @db.ObjectId
  savedById  String  @db.ObjectId

  @@unique([studentId, savedById, isSaved])
}

model PasswordResetToken {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  token  String
  user   User    @relation(fields: [userId], references: [id])

  userId String  @db.ObjectId
}

enum Role {
  STUDENT
  COMPANY
}

enum Tier {
  DIAMOND
  GOLD
  SILVER
  BRONZE
}
